#image: "archlinux:latest"
#image: "archlinux/archlinux:base-devel-20210205.0.15146"
image: "archlinux/archlinux:base-devel"


stages:
  - prechecks
  - prepare
#  - pretests
  - build
  - dkms
  - release
  - deploy

# Warning : the dkms build jobs override this
before_script:
  - pacman-key --init && \
    pacman-key --populate archlinux || true
  - pacman -Sy --noconfirm archlinux-keyring
  - pacman -S --noconfirm --needed reflector curl libarchive glibc
  - pacman -Su --noconfirm

.build_pkg_no_artifact: &buildpkgnoartifact
  script:
    - pacman -S --noconfirm --needed base-devel devtools mkinitcpio asp haveged namcap wget sed dos2unix grep pacman-contrib github-cli
    - sed -i 's/#MAKEFLAGS="-j2"/MAKEFLAGS="-j'$(nproc)'"/' /etc/makepkg.conf
    - sed -i 's/PKGEXT=.*/PKGEXT=".pkg.tar.zst"/' /etc/makepkg.conf
    - sed -i 's/COMPRESSZST=.*/COMPRESSZST=(zstd -c -z - --threads=0)/' /etc/makepkg.conf
    - sed -i 's+curl +curl -A Mozilla +' /etc/makepkg.conf
    - mkdir -p work/output
    - ln -s "$(pwd)"/work /work
    - cp packages_*.lst buildPackages.sh include.sh /work
    - cp -R package /work
    - cp groovy-ux-repo.conf /etc/pacman.d
    - grep -q groovy-ux-repo.conf /etc/pacman.conf || echo -e "\nInclude = /etc/pacman.d/groovy-ux-repo.conf" >> /etc/pacman.conf
    - test $(curl -L -o /dev/null -s -w "%{http_code}" https://github.com/substring/packages/releases/download/testing/groovyarcade-testing.db) -eq "200"  || sed -Ei '5,7s/^(.*)/#\1/g' /etc/pacman.d/groovy-ux-repo.conf
    - pacman -Sy || true
    - useradd -ms /bin/bash -d /work build
    - echo 'build ALL=(root) NOPASSWD:ALL' > /etc/sudoers.d/user && chmod 0440 /etc/sudoers.d/user
    - chown -R build:build work /work
    - chmod -R 777 work /work
    - su - build -c "cd /work && MAKEPKG_OPTS=\"$MAKEPKG_OPTS\" DONT_DOWNLOAD_JUST_BUILD=\"$DONT_DOWNLOAD_JUST_BUILD\" ./buildPackages.sh $MAKEPKG_ARGS" 2>&1 | tee work/output/build.log

.build_packages_template: &buildpackages
  <<: *buildpkgnoartifact
  artifacts:
    paths:
      - work/output
    expire_in: 1 mos

.branches_but_master: &notmaster
  when: manual
  only:
    - branches
  except:
    - master

.only_master: &onlymasterortags
  only:
    - master
    - tags


bash_lint:
  image: koalaman/shellcheck:stable
  stage: prechecks
  allow_failure: true
  when: always
  before_script:
    - shellcheck -V
  script:
    - shellcheck -x *.sh


#build_single_aur:
#  stage: pretests
#  variables:
#    MAKEPKG_ARGS: "-s 'aur/gamemode'"
#  <<: *buildpkgnoartifact


#build_single_native:
#  stage: pretests
#  variables:
#    MAKEPKG_ARGS: "-s kitty"
#  <<: *buildpkgnoartifact


#basic_checks:
#  stage: prechecks
#  <<: *notmaster
#  variables:
#    MAKEPKG_OPTS: "--nobuild --nodeps"
#  <<: *buildpackages
#  when: always


#reset_releases:
  #stage: prepare
  #image: alpine
  #before_script:
    #- echo "Resetting draft releases"
  #script:
    #- apk add --no-cache curl libc6-compat github-cli
    #- /usr/local/bin/github-release edit -t testing -p || true
    #- /usr/local/bin/github-release edit -t stable || true


build:linux:dev:
  stage: build
  <<: *notmaster
  variables:
    MAKEPKG_ARGS: "linux"
  <<: *buildpackages
  tags:
    - longOps


build:arch:dev:
  stage: build
  <<: *notmaster
  variables:
    MAKEPKG_ARGS: "-n"
  <<: *buildpackages



build:groovymame:dev:
  stage: build
  <<: *notmaster
  variables:
    MAKEPKG_ARGS: "-s groovy/groovymame"
  <<: *buildpackages


build:aur:dev:
  stage: build
  <<: *notmaster
  variables:
    MAKEPKG_ARGS: "-a"
  <<: *buildpackages


build:groovy:dev:
  stage: build
  <<: *notmaster
  variables:
    MAKEPKG_ARGS: "-g"
  <<: *buildpackages


dkms:native:dev:
  stage: dkms
  dependencies:
    - build:linux:dev
  variables:
    MAKEPKG_ARGS: "-d"
    DONT_DOWNLOAD_JUST_BUILD: "1"
  before_script:
    - pacman-key --init && \
      pacman-key --populate archlinux || true
    - pacman -Sy --noconfirm archlinux-keyring
    - pacman -S --noconfirm --needed reflector curl libarchive glibc
    - pacman -Su --noconfirm
    - pacman -U --noconfirm work/output/linux-15khz-*
  <<: *buildpackages
  <<: *notmaster
  tags:
     - longOps


build:sfml-attract:dev:
  stage: build
  <<: *notmaster
  variables:
    MAKEPKG_ARGS: "-o"
  <<: *buildpackages


build:linux:
  stage: build
  <<: *onlymasterortags
  variables:
    MAKEPKG_ARGS: "linux"
  <<: *buildpackages
  tags:
     - longOps


build:arch:
  stage: build
  <<: *onlymasterortags
  variables:
    MAKEPKG_ARGS: "-n"
  <<: *buildpackages


build:groovymame:
  stage: build
  <<: *onlymasterortags
  variables:
    MAKEPKG_ARGS: "-s groovy/groovymame"
  <<: *buildpackages


build:aur:
  stage: build
  <<: *onlymasterortags
  variables:
    MAKEPKG_ARGS: "-a"
  <<: *buildpackages


build:sfml-attract:
  stage: build
  <<: *onlymasterortags
  variables:
    MAKEPKG_ARGS: "-o"
  <<: *buildpackages


# allow_failure: true to allow pushing the kernel even if broadcom-wl failed
dkms:native:
  stage: dkms
  dependencies:
    - build:linux
  before_script:
    - pacman-key --init && \
      pacman-key --populate archlinux || true
    - pacman -Sy --noconfirm archlinux-keyring
    - pacman -S --noconfirm --needed reflector curl libarchive glibc
    #- export patched_glibc=glibc-linux4-2.33-4-x86_64.pkg.tar.zst
    #- curl -LO https://repo.archlinuxcn.org/x86_64/$patched_glibc
    #- bsdtar -C / -xvf $patched_glibc
    #- reflector --verbose --latest 50 --sort rate --save /etc/pacman.d/mirrorlist
    - pacman -Su --noconfirm
    - pacman -U --noconfirm work/output/linux-15khz-*
  <<: *onlymasterortags
  variables:
    MAKEPKG_ARGS: "-d"
    DONT_DOWNLOAD_JUST_BUILD: 1
  <<: *buildpackages
  tags:
     - longOps


build:groovy:
  stage: build
  <<: *onlymasterortags
  variables:
    MAKEPKG_ARGS: "-g"
  <<: *buildpackages


release:testing:
  stage: release
  <<: *onlymasterortags
  script:
    - echo "Releasing testing packages"
    - pacman -Sy --noconfirm --needed tar xz grep github-cli
    - ./release.sh -t
  artifacts:
    paths:
      - work/output


deploy:stable:
  stage: deploy
  when: manual
  dependencies:
    - release:testing
  <<: *onlymasterortags
  script:
    - echo "Releasing stable packages"
    - pacman -Sy --noconfirm --needed tar xz grep github-cli
    - BUILD_TYPE=stable ./release.sh -dcur


release:testing:dev:
  stage: release
  script:
    - echo "Releasing unstable packages"
    - pacman -Sy --noconfirm --needed tar xz grep github-cli
    - ./release.sh -n "$CI_COMMIT_REF_SLUG" -dcru
  environment:
    name: testing/$CI_COMMIT_REF_SLUG
    url: https://github.com/substring/packages/releases/tag/$CI_COMMIT_REF_SLUG
    on_stop: release:clean
  <<: *notmaster


release:clean:
  image: alpine
  stage: release
  dependencies: []
  <<: *notmaster
  before_script:
    - echo "Deleting deployment $CI_COMMIT_REF_SLUG"
  script:
    - apk add github-cli
    - gh release delete "$CI_COMMIT_REF_SLUG" -R $GITHUB_USER/$GITHUB_REPO
  environment:
    name: testing/$CI_COMMIT_REF_SLUG
    action: stop
