diff --git a/drivers/gpu/drm/drm_connector.c b/drivers/gpu/drm/drm_connector.c
index 00e40a26a800..82e27ba9325c 100644
--- a/drivers/gpu/drm/drm_connector.c
+++ b/drivers/gpu/drm/drm_connector.c
@@ -266,6 +266,7 @@ int drm_connector_init(struct drm_device *dev,
 	}
 
 	INIT_LIST_HEAD(&connector->probed_modes);
+	INIT_LIST_HEAD(&connector->user_modes);
 	INIT_LIST_HEAD(&connector->modes);
 	mutex_init(&connector->mutex);
 	connector->edid_blob_ptr = NULL;
@@ -458,6 +459,9 @@ void drm_connector_cleanup(struct drm_connector *connector)
 	list_for_each_entry_safe(mode, t, &connector->probed_modes, head)
 		drm_mode_remove(connector, mode);
 
+	list_for_each_entry_safe(mode, t, &connector->user_modes, head)
+		drm_mode_remove(connector, mode);
+
 	list_for_each_entry_safe(mode, t, &connector->modes, head)
 		drm_mode_remove(connector, mode);
 
diff --git a/drivers/gpu/drm/drm_ioctl.c b/drivers/gpu/drm/drm_ioctl.c
index 789ee65ac1f5..489388c5a67d 100644
--- a/drivers/gpu/drm/drm_ioctl.c
+++ b/drivers/gpu/drm/drm_ioctl.c
@@ -665,8 +665,8 @@ static const struct drm_ioctl_desc drm_ioctls[] = {
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_SETGAMMA, drm_mode_gamma_set_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETENCODER, drm_mode_getencoder, 0),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETCONNECTOR, drm_mode_getconnector, 0),
-	DRM_IOCTL_DEF(DRM_IOCTL_MODE_ATTACHMODE, drm_noop, DRM_MASTER),
-	DRM_IOCTL_DEF(DRM_IOCTL_MODE_DETACHMODE, drm_noop, DRM_MASTER),
+	DRM_IOCTL_DEF(DRM_IOCTL_MODE_ATTACHMODE, drm_mode_attachmode_ioctl, DRM_MASTER),
+	DRM_IOCTL_DEF(DRM_IOCTL_MODE_DETACHMODE, drm_mode_detachmode_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETPROPERTY, drm_mode_getproperty_ioctl, 0),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_SETPROPERTY, drm_connector_property_set_ioctl, DRM_MASTER),
 	DRM_IOCTL_DEF(DRM_IOCTL_MODE_GETPROPBLOB, drm_mode_getblob_ioctl, 0),
diff --git a/drivers/gpu/drm/drm_mode_object.c b/drivers/gpu/drm/drm_mode_object.c
index db05f386a709..4e4a2ad9d4a0 100644
--- a/drivers/gpu/drm/drm_mode_object.c
+++ b/drivers/gpu/drm/drm_mode_object.c
@@ -142,17 +142,33 @@ struct drm_mode_object *__drm_mode_object_find(struct drm_device *dev,
 	mutex_lock(&dev->mode_config.idr_mutex);
 	obj = idr_find(&dev->mode_config.object_idr, id);
 	if (obj && type != DRM_MODE_OBJECT_ANY && obj->type != type)
+	{
+		DRM_DEBUG("1st test NULL\n");
+		DRM_DEBUG("obj NULL ? %d\n", obj ? 0 : 1);
+		DRM_DEBUG("type != DRM_MODE_OBJECT_ANY ? %#010x\n", type != DRM_MODE_OBJECT_ANY ? type : 1);
+		DRM_DEBUG("obj->type != type ? %#010x\n", obj->type != type ? obj->type : 0);
 		obj = NULL;
+	}
+
 	if (obj && obj->id != id)
+	{
+		DRM_DEBUG("2nd test NULL\n");
 		obj = NULL;
+	}
 
 	if (obj && drm_mode_object_lease_required(obj->type) &&
 	    !_drm_lease_held(file_priv, obj->id))
+	{
+		DRM_DEBUG("3rd test NULL\n");
 		obj = NULL;
+	}
 
 	if (obj && obj->free_cb) {
 		if (!kref_get_unless_zero(&obj->refcount))
+		{
+			DRM_DEBUG("4th test NULL\n");
 			obj = NULL;
+		}
 	}
 	mutex_unlock(&dev->mode_config.idr_mutex);
 
diff --git a/drivers/gpu/drm/drm_modes.c b/drivers/gpu/drm/drm_modes.c
index 501b4fe55a3d..ece32dba4d76 100644
--- a/drivers/gpu/drm/drm_modes.c
+++ b/drivers/gpu/drm/drm_modes.c
@@ -40,6 +40,7 @@
 
 #include <drm/drm_crtc.h>
 #include <drm/drm_device.h>
+#include <drm/drm_drv.h>
 #include <drm/drm_modes.h>
 #include <drm/drm_print.h>
 
@@ -113,6 +114,208 @@ void drm_mode_probed_add(struct drm_connector *connector,
 }
 EXPORT_SYMBOL(drm_mode_probed_add);
 
+/**
+ * drm_mode_attachmode - add a mode to the user mode list
+ * @dev: DRM device
+ * @connector: connector to add the mode to
+ * @mode: mode to add
+ *
+ * Add @mode to @connector's user mode list.
+ */
+static void drm_mode_attachmode(struct drm_device *dev,
+				struct drm_connector *connector,
+				struct drm_display_mode *mode)
+{
+	list_add_tail(&mode->head, &connector->user_modes);
+	drm_connector_list_update(connector);
+}
+EXPORT_SYMBOL(drm_mode_attachmode);
+/*
+int drm_mode_attachmode_crtc(struct drm_device *dev, struct drm_crtc *crtc,
+			     const struct drm_display_mode *mode)
+{
+	struct drm_connector *connector;
+	int ret = 0;
+	struct drm_display_mode *dup_mode, *next;
+	LIST_HEAD(list);
+
+	list_for_each_entry(connector, &dev->mode_config.connector_list, head) {
+		if (!connector->encoder)
+			continue;
+		if (connector->encoder->crtc == crtc) {
+			dup_mode = drm_mode_duplicate(dev, mode);
+			if (!dup_mode) {
+				ret = -ENOMEM;
+				goto out;
+			}
+			list_add_tail(&dup_mode->head, &list);
+		}
+	}
+
+	list_for_each_entry(connector, &dev->mode_config.connector_list, head) {
+		if (!connector->encoder)
+			continue;
+		if (connector->encoder->crtc == crtc)
+			list_move_tail(list.next, &connector->user_modes);
+	}
+
+	WARN_ON(!list_empty(&list));
+
+ out:
+	list_for_each_entry_safe(dup_mode, next, &list, head)
+		drm_mode_destroy(dev, dup_mode);
+
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_attachmode_crtc);
+*/
+static int drm_mode_detachmode(struct drm_device *dev,
+			       struct drm_connector *connector,
+			       struct drm_display_mode *mode)
+{
+	int found = 0;
+	int ret = 0;
+	struct drm_display_mode *match_mode, *t;
+
+	list_for_each_entry_safe(match_mode, t, &connector->user_modes, head) {
+		if (drm_mode_equal(match_mode, mode)) {
+			list_del(&match_mode->head);
+			drm_mode_destroy(dev, match_mode);
+			found = 1;
+			break;
+		}
+	}
+
+	if (!found)
+		ret = -EINVAL;
+
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_detachmode);
+/*
+int drm_mode_detachmode_crtc(struct drm_device *dev, struct drm_display_mode *mode)
+{
+	struct drm_connector *connector;
+
+	list_for_each_entry(connector, &dev->mode_config.connector_list, head) {
+		drm_mode_detachmode(dev, connector, mode);
+	}
+	return 0;
+}
+EXPORT_SYMBOL(drm_mode_detachmode_crtc);
+*/
+/**
+ * drm_fb_attachmode - Attach a user mode to an connector
+ * @dev: drm device for the ioctl
+ * @data: data pointer for the ioctl
+ * @file_priv: drm file for the ioctl call
+ *
+ * This attaches a user specified mode to an connector.
+ * Called by the user via ioctl.
+ *
+ * RETURNS:
+ * Zero on success, errno on failure.
+ */
+int drm_mode_attachmode_ioctl(struct drm_device *dev, void *data,
+			      struct drm_file *file_priv)
+{
+	struct drm_mode_mode_cmd *mode_cmd = data;
+	struct drm_connector *connector;
+	struct drm_display_mode *mode;
+	struct drm_mode_object *obj;
+	struct drm_mode_modeinfo *umode = &mode_cmd->mode;
+	int ret;
+
+	DRM_DEBUG_KMS("Will drm_core_check_feature for connector %u\n", mode_cmd->connector_id);
+	if (!drm_core_check_feature(dev, DRIVER_MODESET))
+		return -EINVAL;
+
+	drm_modeset_lock_all(dev);
+
+	DRM_DEBUG_KMS("Modeline \"%s\": %d %d %d %d %d %d %d %d %d %d 0x%x 0x%x\n", umode->name, DIV_ROUND_CLOSEST(umode->clock * 1000, umode->htotal * umode->vtotal), umode->clock, \
+	umode->hdisplay, umode->hsync_start, umode->hsync_end, umode->htotal, \
+	umode->vdisplay, umode->vsync_start, umode->vsync_end, umode->vtotal, \
+	umode->type, umode->flags);
+
+	DRM_DEBUG_KMS("Will drm_mode_object_find for connector %u\n", mode_cmd->connector_id);
+	obj = drm_mode_object_find(dev, file_priv, mode_cmd->connector_id, DRM_MODE_OBJECT_CONNECTOR);
+	if (!obj) {
+		DRM_DEBUG_KMS("drm_mode_object_find failed\n");
+		ret = -EINVAL;
+		goto out;
+	}
+	connector = obj_to_connector(obj);
+
+	mode = drm_mode_create(dev);
+	if (!mode) {
+		DRM_DEBUG_KMS("drm_mode_create failed\n");
+		ret = -ENOMEM;
+		goto out;
+	}
+
+	DRM_DEBUG_KMS("Will drm_mode_convert_umode for connector %u\n", mode_cmd->connector_id);
+	ret = drm_mode_convert_umode(dev, mode, umode);
+	if (ret) {
+		DRM_DEBUG_KMS("Invalid mode\n");
+		drm_mode_destroy(dev, mode);
+		goto out;
+	}
+	drm_mode_attachmode(dev, connector, mode);
+out:
+	drm_modeset_unlock_all(dev);
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_attachmode_ioctl);
+
+/**
+ * drm_fb_detachmode - Detach a user specified mode from an connector
+ * @dev: drm device for the ioctl
+ * @data: data pointer for the ioctl
+ * @file_priv: drm file for the ioctl call
+ *
+ * Called by the user via ioctl.
+ *
+ * RETURNS:
+ * Zero on success, errno on failure.
+ */
+int drm_mode_detachmode_ioctl(struct drm_device *dev,
+			      void *data, struct drm_file *file_priv)
+{
+	struct drm_mode_object *obj;
+	struct drm_mode_mode_cmd *mode_cmd = data;
+	struct drm_connector *connector;
+	struct drm_display_mode mode;
+	struct drm_mode_modeinfo *umode = &mode_cmd->mode;
+	int ret;
+
+	DRM_DEBUG_KMS("Got connector id %d\n", mode_cmd->connector_id);
+	DRM_DEBUG_KMS("Checking core features\n");
+	if (!drm_core_check_feature(dev, DRIVER_MODESET))
+		return -EINVAL;
+
+	drm_modeset_lock_all(dev);
+
+	DRM_DEBUG_KMS("Finding drm mode object\n");
+	obj = drm_mode_object_find(dev, file_priv, mode_cmd->connector_id, DRM_MODE_OBJECT_CONNECTOR);
+	if (!obj) {
+		ret = -EINVAL;
+		goto out;
+	}
+	connector = obj_to_connector(obj);
+
+	ret = drm_mode_convert_umode(dev, &mode, umode);
+	if (ret) {
+		DRM_DEBUG_KMS("Invalid mode\n");
+		goto out;
+	}
+
+	ret = drm_mode_detachmode(dev, connector, &mode);
+out:
+	drm_modeset_unlock_all(dev);
+	return ret;
+}
+EXPORT_SYMBOL(drm_mode_detachmode_ioctl);
+
 /**
  * drm_cvt_mode -create a modeline based on the CVT algorithm
  * @dev: drm device
@@ -1337,7 +1540,7 @@ EXPORT_SYMBOL(drm_mode_sort);
  */
 void drm_connector_list_update(struct drm_connector *connector)
 {
-	struct drm_display_mode *pmode, *pt;
+	struct drm_display_mode *pmode, *umode, *pt;
 
 	WARN_ON(!mutex_is_locked(&connector->dev->mode_config.mutex));
 
@@ -1383,6 +1586,54 @@ void drm_connector_list_update(struct drm_connector *connector)
 			list_move_tail(&pmode->head, &connector->modes);
 		}
 	}
+
+	list_for_each_entry_safe(umode, pt, &connector->user_modes, head) {
+		struct drm_display_mode *mode;
+		bool found_it = false;
+
+		/* go through current modes checking for the new probed mode */
+		list_for_each_entry(mode, &connector->modes, head) {
+			DRM_DEBUG("Checking umode %s VS mode %s\n", umode->name, mode->name);
+			if (!drm_mode_equal(umode, mode))
+				continue;
+
+			found_it = true;
+
+			/*
+			 * If the old matching mode is stale (ie. left over
+			 * from a previous probe) just replace it outright.
+			 * Otherwise just merge the type bits between all
+			 * equal probed modes.
+			 *
+			 * If two probed modes are considered equal, pick the
+			 * actual timings from the one that's marked as
+			 * preferred (in case the match isn't 100%). If
+			 * multiple or zero preferred modes are present, favor
+			 * the mode added to the probed_modes list first.
+			 */
+			if (mode->status == MODE_STALE) {
+				drm_mode_copy(mode, umode);
+			} else if ((mode->type & DRM_MODE_TYPE_PREFERRED) == 0 &&
+				   (umode->type & DRM_MODE_TYPE_PREFERRED) != 0) {
+				umode->type |= mode->type;
+				drm_mode_copy(mode, umode);
+			} else {
+				mode->type |= umode->type;
+			}
+
+			list_del(&umode->head);
+			drm_mode_destroy(connector->dev, umode);
+			break;
+		}
+
+		if (!found_it) {
+			DRM_DEBUG("Adding %s mode to connector mode list\n", umode->name);
+			list_move_tail(&umode->head, &connector->modes);
+		}
+	}
+	list_for_each_entry(pmode, &connector->modes, head) {
+		DRM_DEBUG("Connector mode: %s", pmode->name);
+	}
 }
 EXPORT_SYMBOL(drm_connector_list_update);
 
diff --git a/include/drm/drm_connector.h b/include/drm/drm_connector.h
index af145608b5ed..4d773a08e9d6 100644
--- a/include/drm/drm_connector.h
+++ b/include/drm/drm_connector.h
@@ -1270,6 +1270,14 @@ struct drm_connector {
 	 */
 	struct list_head probed_modes;
 
+	/**
+	 * @user_modes:
+	 * These are modes added by probing with DDC or the BIOS, before
+	 * filtering is applied. Used by the probe helpers. Protected by
+	 * &drm_mode_config.mutex.
+	 */
+	struct list_head user_modes;
+
 	/**
 	 * @display_info: Display information is filled from EDID information
 	 * when a display is detected. For non hot-pluggable displays such as
diff --git a/include/drm/drm_modes.h b/include/drm/drm_modes.h
index eee3c9de6c4f..4de501a5bb8e 100644
--- a/include/drm/drm_modes.h
+++ b/include/drm/drm_modes.h
@@ -444,6 +444,10 @@ int drm_mode_convert_umode(struct drm_device *dev,
 			   struct drm_display_mode *out,
 			   const struct drm_mode_modeinfo *in);
 void drm_mode_probed_add(struct drm_connector *connector, struct drm_display_mode *mode);
+int drm_mode_attachmode_ioctl(struct drm_device *dev,
+			      void *data, struct drm_file *file_priv);
+int drm_mode_detachmode_ioctl(struct drm_device *dev,
+			      void *data, struct drm_file *file_priv);
 void drm_mode_debug_printmodeline(const struct drm_display_mode *mode);
 bool drm_mode_is_420_only(const struct drm_display_info *display,
 			  const struct drm_display_mode *mode);
